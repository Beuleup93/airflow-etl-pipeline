name: Continuous Integration

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  # Job 1: Tests unitaires et d'intégration
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: ecommerce_db
          POSTGRES_USER: postgres
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install apache-airflow==2.8.1
        pip install -r requirements.txt

    - name: Create virtual environment
      run: |
        python -m venv venv
        source venv/bin/activate
        pip install apache-airflow==2.8.1
        pip install -r requirements.txt

    - name: Run unit tests
      run: |
        source venv/bin/activate
        python -m pytest tests/unit/ -v --tb=short --junitxml=test-results/unit-tests.xml

    - name: Run integration tests
      run: |
        source venv/bin/activate
        python -m pytest tests/integration/ -v --tb=short --junitxml=test-results/integration-tests.xml

    - name: Run DAG tests
      run: |
        source venv/bin/activate
        python -m pytest tests/unit/test_dags.py -v --tb=short --junitxml=test-results/dag-tests.xml

    - name: Validate DAGs
      run: |
        source venv/bin/activate
        python scripts/validate_dags.py

    - name: Create test results directory
      run: |
        mkdir -p test-results

    - name: Run all tests with coverage
      run: |
        source venv/bin/activate
        python -m pytest tests/ --cov=include --cov-report=xml --cov-report=html --junitxml=test-results/all-tests.xml

    - name: Upload test results
      uses: actions/upload-artifact@v4
      with:
        name: test-results
        path: |
          test-results/
          coverage.xml
          htmlcov/

    - name: Upload coverage reports
      uses: actions/upload-artifact@v4
      with:
        name: coverage-reports
        path: |
          coverage.xml
          htmlcov/

  # Job 2: Linting et formatage
  lint:
    name: Code Quality
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install linting tools
      run: |
        pip install flake8 black isort mypy

    - name: Run flake8
      run: |
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics

    - name: Run black
      run: |
        black --check --diff . || echo "Black formatting issues found"

    - name: Run isort
      run: |
        isort --check-only --diff . || echo "Import sorting issues found"

    - name: Run mypy
      run: |
        mypy include/ --ignore-missing-imports

  # Job 3: Sécurité
  security:
    name: Security Scan
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install security tools
      run: |
        pip install bandit safety

    - name: Run bandit security scan
      run: |
        bandit -r include/ -f json -o bandit-report.json || echo "Security scan completed with issues"

    - name: Run safety check
      run: |
        safety check --json --output safety-report.json || echo "Safety check completed with issues"

    - name: Upload security reports
      uses: actions/upload-artifact@v4
      with:
        name: security-reports
        path: |
          bandit-report.json
          safety-report.json

  # Job 4: Build Docker
  build:
    name: Build Docker Image
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: false
        load: true
        tags: airflow-etl:test
        cache-from: type=gha
        cache-to: type=gha,mode=max

  # Job 5: Notification
  notify:
    name: Notify Results
    runs-on: ubuntu-latest
    needs: [test, lint, security, build]
    if: always()

    steps:
    - name: Notify success
      if: ${{ needs.test.result == 'success' && needs.lint.result == 'success' && needs.security.result == 'success' && needs.build.result == 'success' }}
      run: |
        echo "All tests passed successfully"
        echo "Code quality checks passed"
        echo "Security scan completed"
        echo "Docker build successful"
        echo "Pipeline is ready for deployment"

    - name: Notify failure
      if: ${{ needs.test.result == 'failure' || needs.lint.result == 'failure' || needs.security.result == 'failure' || needs.build.result == 'failure' }}
      run: |
        echo "Some checks failed"
        echo "Test result: ${{ needs.test.result }}"
        echo "Lint result: ${{ needs.lint.result }}"
        echo "Security result: ${{ needs.security.result }}"
        echo "Build result: ${{ needs.build.result }}"
        echo "Check the logs for details"