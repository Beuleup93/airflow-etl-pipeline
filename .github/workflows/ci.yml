name: Continuous Integration

on:
  push:
    branches: [ main, develop, feature/* ]
  pull_request:
    branches: [ main, develop ]

jobs:
  # Job 1: Tests unitaires et d'int√©gration
  test:
    name: Tests
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        python-version: ['3.11']

    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: ecommerce_db
          POSTGRES_USER: postgres
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Create virtual environment
      run: |
        python -m venv venv
        source venv/bin/activate
        pip install -r requirements.txt

    - name: Run unit tests
      run: |
        source venv/bin/activate
        python -m pytest tests/unit/ -v --cov=include --cov-report=xml || true

    - name: Run integration tests
      run: |
        source venv/bin/activate
        python -m pytest tests/integration/ -v || true

    - name: Run DAG tests
      run: |
        source venv/bin/activate
        python -m pytest tests/unit/test_dags.py -v || true

    - name: Upload coverage reports
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella

  # Job 2: Linting et formatage
  lint:
    name: Linting
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install linting tools
      run: |
        pip install flake8 black isort mypy

    - name: Run flake8
      run: |
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics || true

    - name: Run black
      run: |
        black --check --diff . || true

    - name: Run isort
      run: |
        isort --check-only --diff . || true

    - name: Run mypy
      run: |
        mypy include/ --ignore-missing-imports || true

  # Job 3: S√©curit√©
  security:
    name: Security Scan
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install security tools
      run: |
        pip install bandit safety

    - name: Run bandit security scan
      run: |
        bandit -r include/ -f json -o bandit-report.json || true

    - name: Run safety check
      run: |
        safety check --json --output safety-report.json || true

    - name: Upload security reports
      uses: actions/upload-artifact@v4
      with:
        name: security-reports
        path: |
          bandit-report.json
          safety-report.json

  # Job 4: Validation des DAGs
  validate-dags:
    name: Validate DAGs
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install Airflow
      run: |
        pip install apache-airflow==2.8.1

    - name: Validate DAGs
      run: |
        python scripts/validate_dags.py || true

    - name: Check DAG syntax
      run: |
        python -m py_compile dags/*.py || true

  # Job 5: Build Docker
  build-docker:
    name: Build Docker Image
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: false
        tags: airflow-etl:test
        cache-from: type=gha
        cache-to: type=gha,mode=max

  # Job 6: Notification
  notify:
    name: Notify Results
    runs-on: ubuntu-latest
    needs: [test, lint, security, validate-dags, build-docker]
    if: always()

    steps:
    - name: Notify success
      if: ${{ needs.test.result == 'success' && needs.lint.result == 'success' && needs.security.result == 'success' }}
      run: |
        echo "‚úÖ Tous les tests sont pass√©s !"
        echo "üöÄ Le code est pr√™t pour le d√©ploiement"

    - name: Notify failure
      if: ${{ needs.test.result == 'failure' || needs.lint.result == 'failure' || needs.security.result == 'failure' }}
      run: |
        echo "‚ùå Certains tests ont √©chou√©"
        echo "üîç V√©rifiez les logs pour plus de d√©tails"
