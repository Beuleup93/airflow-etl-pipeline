name: Simple CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  # Job simple : Tests basiques
  test:
    name: Basic Tests
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Run basic tests
      run: |
        python -c "print('‚úÖ Basic Python test passed')"
        python -c "import sys; print(f'Python version: {sys.version}')"

    - name: Check DAG syntax
      run: |
        python -c "import ast; ast.parse(open('dags/etl_ecommerce_dag.py').read()); print('‚úÖ ETL DAG syntax OK')"
        python -c "import ast; ast.parse(open('dags/data_quality_dag.py').read()); print('‚úÖ Quality DAG syntax OK')"
        python -c "import ast; ast.parse(open('dags/monitoring_dag.py').read()); print('‚úÖ Monitoring DAG syntax OK')"

    - name: Test imports
      run: |
        python -c "from include.extract import DataExtractor; print('‚úÖ Extract module OK')"
        python -c "from include.transform import DataTransformer; print('‚úÖ Transform module OK')"
        python -c "from include.load import DataLoader; print('‚úÖ Load module OK')"

  # Job simple : Build Docker
  build:
    name: Build Docker
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: false
        tags: airflow-etl:test
        cache-from: type=gha
        cache-to: type=gha,mode=max

  # Job simple : Notification
  notify:
    name: Notify Success
    runs-on: ubuntu-latest
    needs: [test, build]
    if: always()

    steps:
    - name: Notify results
      run: |
        if [ "${{ needs.test.result }}" = "success" ] && [ "${{ needs.build.result }}" = "success" ]; then
          echo "‚úÖ All checks passed!"
          echo "üöÄ Project is ready for deployment"
        else
          echo "‚ùå Some checks failed"
          echo "üîç Check the logs for details"
        fi
